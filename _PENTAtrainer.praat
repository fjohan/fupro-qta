# _PENTAtrainer
version$ = "v 1.3"
# Last update: 15 October, 2010
# Written by:   Yi Xu (yi.xu@ucl.ac.uk) and Santitham Prom-on 
# (Santitham Prom-on <santitham@cpe.kmutt.ac.th>); all rights reserved.
# Report any bugs to Yi Xu

# modified to work with festival by Johan Frid (johan.frid@ling.lu.se) 2015

#	This script is for automatic extraction of pitch target parameters. A pitch target is an ideal 
#	f0 trajectory associated with a segmental unit, which is defined by three parameters: slope, 
#	height and strength. The target notion is the core of the PENTA model (Parallel Encoding and 
#	Target Approximation, cf. Xu, 2005). The current script is based on the qTA implementation of 
#	PENTA (Prom-on et al., 2009).

#	In qTA, a target is defined by a linear equation f0 = mt + b, where f0 is the surface f0, m is 
#	the slope of the target and b is the height of the target defined as the intercept of the target 
#	offset with the y-axis. The surface f0 is the outcome of sequential asymptotic approximation of 
#	successive pitch targets based on a critically damped 3rd-order linear system.

#	The extraction of target parameters in this script is done by analysis-by-synthesis. For each 
#	target interval, the surface f0 contour is generated based on qTA using all combinations of the 
#	three parameters within the search range at a certain step size, and the difference between the 
#	synthesized and original contours is computed in terms of sum of squared errors (SSE). 
#	The parameter combination with the least SSE is chosen as the target of the interval.

#	The target intervals are defined by user by marking and naming it with a label in the top tier 
#	of the TextGrid. Intervals with no labels are ignored by the script.

#	The target search ranges can be restricted by user in a number of ways:

# 1.	In the startup window, users can change the global search ranges defined by the maximum and 
#	minimum parameter values.
# 2.	For each sound file, empty intervals in the target tier (2) are given full search ranges 
#	defined by the maximum and minimum parameter values. 
# 3.	Tier 2 intervals labeled as H, M, L, h, m or l are given a fixed slope at 0. 
# 4.	Tier 2 intervals labeled as R or r are searched only for positive slopes. 
# 5.	Tier 2 intervals labeled as F or f are searched only for negative slopes

#	In addition to target extraction, the script also performs all the f0 analysis inherited from 
#	ProsodyPro (http://www.phon.ucl.ac.uk/home/yi/ProsodyPro/, as explained below.

# SYNOPSIS: 
# 1) Automatically open each .wav file in a folder, manually label intervals and rectify 
# vocal pulse markings; 
# 2) Save automatically trimmed (smoothed) f0 contours; 
# 3) Save time-normalized f0; 
# 4) Save time-normalized f0 with actual time; 
# 5) Save manually rectified, trimmed f0 as PitchTier objects which can replace the pitch 
# tier in Manipulation objects; 
# 6) Save sampled f0; 
# 7) Save f0 velocity; 
# 8) Save maxf0, minf0, excursionsize, mean f0, intensity, duration, peak velocity, final velocity 
#	and final f0 of labeled intervals;
# 9) Save results into ensemble files.

# INSTRUCTIONS:

# 1. Put all the (or a group of) sound files to be analyzed in a single folder together with 
# this script, and launch Praat;

# 2. Select Open Praat Script... from the top menu;

# 3. Locate this script in the dialogue window and select it;

# 4. When the script window opens in Praat, select Run from the Run menu (or type the key 
# shortcut command-r or control-r);

# 5. When a dialogue window opens, check or uncheck the boxes according to your analysis needs, 
# and set appropriate values in the text fields or simply use the default values.

# 6. Click OK and three windows will appear. The first big window displays the waveform together 
# with vocal cycle marks (vertical lines) generated by Praat. This is where you can manually 
# make sure the F0 tracking is accurate by adding marks to those vocal cycles missed by Praat 
# and deleting any redundant marks. But you need to do so only for the named intervals, as 
# explained next.

# 7. The second big window displays the waveform and spectrogram of the current sound together 
# with optional pitch track and formant tracks in the spectrogram panel, and vocal pulse marks 
# in the waveform panel. (These tracks and marks cannot be manually changed. So you can hide 
# them to reduce processing time by using the corresponding menu.) At the bottom of this window 
# are two TextGrids, where you can insert interval boundaries (upper grid) and point labels 
# (lower grid). Most importantly, for any interval that you want to have analysis results saved, 
# you need to type a name. Make the name as simple as possible to save time, e.g., a, b, or 1, 2.

# 8. When you are done with manual correction and labeling, activate the third, small window.
# Click "Continue" there and two new big windows will appear, displaying the spectrogram, 
# waveform and vocal cycle marks of the next sound file in the folder. You can repeat this 
# process until all the sound files in the folder are processed. Or you can finish at any point  
# by clicking the "Finish" button in the small window (Do not press the stop button! You will lose
# the changes to the current file and see some unpleasant messages!) Please remember to note down 
# the current file number in pop_up window so that
# you know where to start when you want to continue the labeling next time.

# 9. New! If you want to jump to any file, just replace the current number in the small
# window with the new file number minus one. For example, if you want to jump to file 1, enter 0.

# 10. Each time you press the "Continue" button in the small window, various analysis results 
# are saved for the current sound into individual text files as described below. If, however,
# you want to change certain analysis parameters after processing all the sound files, you
# can rerun the script, set the "Input File No" to 1 in the initial Dialogue window and uncheck
# the "Pause between sound files" button before pressing "OK". The script will then run by 
# itself and cycle through all the sound files in the folder one by one. Just watch the action 
# with amusement.

# 10. The following files will be saved as each sound file is processed:  

# 	.f0 -- trimmed f0 with real time.

# 	.rawf0 -- raw with real time computed directly from the pulse markings.

# 	.timenormf0 -- time-normalized f0. The f0 in each interval is divided 
# 	into the same number of points (default = 10). Thus points 1-10 belong to interval 1, and 
# 	points 11-20 belong to interval 2, etc.

# 	.actutimenormf0 -- time-normalized f0 with each interval divided into the same number
# 	of points (default = 10). But the time scale is the original, except
# 	that the onset time of interval 1 is set to 0, unless the "Set initial time to 0" box in 
# 	the initial dialogue window is unchecked.  

# 	.samplef0 -- f0 values at fixed time intervals specified by "f0 sample rate".    

# 	.f0velocity -- velocity profile (instantaneous rates of F0 change) of f0 contour in 
# 	semitone/s at fixed time intervals specified by "f0 sample rate".

# 	.means -- containing various measurements, including maxf0, minf0, excursion size,  
# 	mean intensity, duration, max_velocity, final_velocity. Final velocity is taken at a point
#   earlier than the interval offset by time specified by "Final offset" in the 
#   startup window. It is an indicator of the slope of the underlying target of the interval.
#	Final f0 is is an indicator of the height of the underlying target, taken also at a point
#   specified by "Final offset" in the startup dialogue window.

# 11. The values in these files correspond only to the named intervals, i.e., those with 
# text names. No values are saved for the blank intervals.

# 12. The .f0, .timenormf0, and .actutimenormf0 files can be opened by a graphing program 
# such as Excel. The left-hand column is time and the right-hand column f0.

# 13. The .means file contains values of maxf0, minf0, excursionsize, meanf0, mean intensity, duration and 
# peak velocity (if "Get sample f0 box" has been checked when processing individual files) of 
# all named intervals.

# 14. After the analysis of all the individual sound files are done, you can gather the analysis 
# results into a number of ensemble files by running the script again and checking the "Get 
# ensemble results" button in the initial dialogue window. The following ensemble files are saved:

# 		1)	normf0.txt
# 		2)	normactutime.txt
# 		3)	samplef0.txt
# 		4)	f0velocity.txt
# 		5)	maxf0.txt
# 		6)	minf0.txt
# 		7)	excursionsize.txt
# 		8)	meanf0.txt
# 		9)	duration.txt
# 		10)	maxvelocity.txt
# 		11)	finalvelocity.txt
# 		12)	finalf0.txt
# 		13)	meanintensity.txt

# 15. Note that you can generate an ensemble file only if you have saved at least one  
# corresponding individual analysis file described earlier.


form PENTAtrainer
	integer Input_File_No 1
	word TextGrid_extension label
	choice Task: 1
		button Interactive target view
		button Process all sounds without pause
		button Get emsemble files
	comment F0 analysis options:
		integer left_F0_range_(Hz) 50
		integer right_F0_range_(Hz) 200
		integer Npoints_per_interval 10
		integer F0_sample_rate_(Hz) 100
		integer Perturbation_length_(ms) 0
		real Final_offset -0.03
		boolean Set_initial_time_for_normf0_to_0 1
	comment Target extraction options:
		real left_Target_slope_range_(st/s) -100
		real right_Target_slope_range_(st/s) 100
		real left_Target_height_range_(st) -20
		real right_Target_height_range_(st) 20
		real left_Strength_range 20
		real right_Strength_range 60
		boolean Use_final_velocity_to_constrain_slope 1
		boolean Fix_strength_to_minimum_strength 0
#	choice b_Location: 2
#		button Onset
#		button Offset
endform

npoints = npoints_per_interval
minf0 = left_F0_range
maxf0 = right_F0_range
min_target_slope = left_Target_slope_range
max_target_slope = right_Target_slope_range
min_target_height = left_Target_height_range
max_target_height = right_Target_height_range
min_strength = left_Strength_range
max_strength = right_Strength_range
fixed_strength = fix_strength_to_minimum_strength
if (fixed_strength<1)
	assert min_strength < max_strength
endif
assert min_target_slope < max_target_slope 
assert min_target_height < max_target_height 

b_Location = 2

directory$ = "./"
Create Strings as file list... list 'directory$'*.wav
numberOfFiles = Get number of strings
if !numberOfFiles
	Create Strings as file list... list 'directory$'*.WAV
	numberOfFiles = Get number of strings
endif
if !numberOfFiles
	exit There are no sound files in the folder!
else
	Write to raw text file... 'directory$'FileList.txt
	more_file = 1
endif

## Hack to use custom file list ##
#Remove
#Read Strings from raw text file... 'directory$'MyFileList.txt
#Rename... list
## Hack ##

hasmeanstitle = 0
hasnormf0 = 0
hasnormactutime = 0
hassamplef0 = 0
hasf0velocity = 0
hasqTAf0 = 0
number = input_File_No
for current_file from input_File_No to numberOfFiles
	select Strings list
	fileName$ = Get string... current_file
	name$ = fileName$ - ".wav" - ".WAV"
	if task == 3
		if fileReadable(directory$+name$+".timenormf0")
			call All_means 'name$'
		endif
		if fileReadable(directory$+name$+".timenormf0")
			call All_normf0 'name$'
		endif
		if fileReadable(directory$+name$+".samplef0")
			call All_samplef0 'name$'
			call All_f0velocity 'name$'
		endif
	else
		call Labeling 'fileName$'
	endif
endfor

procedure Labeling file_name$ file_extension$
	Read from file... 'directory$''file_name$'
	name$ = file_name$ - ".wav" - ".WAV"
	if fileReadable ("'directory$''name$'.target")
		Read from file... 'directory$''name$'.target
	elsif fileReadable ("'directory$''name$'.'TextGrid_extension$'")
		if textGrid_extension$ == "feats"
			it1=Read IntervalTier from Xwaves... 'directory$''name$'.'TextGrid_extension$'
			privateTG=Into TextGrid
			Rename... 'name$'
			select 'it1'
			Remove
			select 'privateTG'
		else
			Read from file... 'directory$''name$'.'TextGrid_extension$'
		endif
		nTiers = Get number of tiers
		if nTiers > 1
			tier2$ = Get tier name... 2
		else
			tier2$ = "null"
		endif
		if nTiers < 3 or tier2$ != "target"
			nintervals = Get number of intervals... 1
			Duplicate tier... 1 2 target
			Replace interval text... 2 0 nintervals . "" Regular Expressions
		endif
	else
		To TextGrid... "interval target comment" comment
	endif
	plus Sound 'name$'
	# comment to show labelling window
	#Edit
	
	pulsefile$ = name$+".pulse"
	if fileReadable (pulsefile$)
		Read from file... 'directory$''name$'.pulse
	else
		select Sound 'name$'
		To PointProcess (periodic, cc)... minf0 maxf0
		Rename... 'name$'
	endif
	plus Sound 'name$'
	# comment to show pulse editing window
	#Edit
	
	replot = 1
	call Save 'directory$' 'name$'
	select Sound 'name$'
	Remove
endproc

procedure Save directory$ name$
	select PointProcess 'name$'
	npulses = Get number of points
	for n from 2 to npulses
		time1 = Get time from index... n-1
		time2 = Get time from index... n
		if time2 = time1
			Remove point... n
		endif
	endfor
	Write to short text file... 'directory$''name$'.pulse
	maxperiod = 1/minf0
	To PitchTier... maxperiod
	Down to TableOfReal... Hertz
	Write to headerless spreadsheet file... 'directory$''name$'.rawf0
	Remove
	select PitchTier 'name$'
	#pause
	#To Pitch... 0.005 minf0 maxf0
	#Smooth... 10
	#Down to PitchTier
	call Trimf0
	#To Pitch... 0.005 minf0 maxf0
	#Smooth... 10
	#Down to PitchTier
	#Stylize... 0.5 Semitones
	#Interpolate quadratically... 4 Semitones

	#pause
	Write to short text file... 'directory$''name$'.PitchTier
	Down to TableOfReal... Hertz
	Write to headerless spreadsheet file... 'directory$''name$'.f0
	Remove

	call Sampling
	if found_interval
		call Differentiation
		call Smooth "velocity" "smooth_velocity" 0.05 * f0_sample_rate
		select TableOfReal samplef0
		Write to headerless spreadsheet file... 'directory$''name$'.samplef0
		Remove
		select TableOfReal velocity
		Write to headerless spreadsheet file... 'directory$''name$'.f0velocity
		plus PitchTier smoothf0
		Remove
	endif

	if found_interval
		call Normalization
		select TableOfReal normf0
		Write to headerless spreadsheet file... 'directory$''name$'.timenormf0
		select TableOfReal normactuf0
		Write to headerless spreadsheet file... 'directory$''name$'.actutimenormf0
		plus TableOfReal normf0
		plus TableOfReal normactuf0
		Remove
		
		call Means
		select PitchTier semitonef0
		Write to short text file... 'directory$''name$'.PitchTier_semitone
		select PitchTier smooth_velocity
		Remove

		select TableOfReal means
		Write to headerless spreadsheet file... 'directory$''name$'.means
		plus Intensity 'name$'
		Remove
		select PitchTier 'name$'
		plus PitchTier velocity
		Remove
	endif
	
	select TextGrid 'name$'
	Write to short text file... 'directory$''name$'.target

	if task == 1 and replot == 1
		if !found_interval
			select Sound 'name$'
			tInitial = Get start time
			tFinal = Get end time
		endif
		plot_width = tFinal - tInitial
		call plot_target tInitial tFinal
	elsif task = 2
		select TextGrid 'name$'
		plus PointProcess 'name$'
		if found_interval
			plus PitchTier semitonef0
			plus PitchTier fittedf0
			plus Manipulation 'name$'
		else
			plus PitchTier 'name$'
			plus PitchTier samplef0
			plus TableOfReal samplef0
		endif
		Remove
	endif	
endproc

procedure Trimf0
	maxbump = 0.01
	maxedge = 0.0
	maxgap = 0.033
	n = Get number of points
	
	first = Get value at index... 1
	second = Get value at index... 2
	penult = Get value at index... n-1
	last = Get value at index... n
	tfirst = Get time from index... 1
	tlast = Get time from index... n
	for k from 1 to 3
		call Trim
	endfor
	Remove point... 1
	Add point... tfirst second + (first-second) / 1000
	Remove point... n
	Add point... tlast penult + (last-penult) / 1000
endproc

procedure Trim
	for i from 2 to n-1
		tleft = Get time from index... i-1
		tmid = Get time from index... i
		tright = Get time from index... i+1
		gap1 = tmid - tleft
		gap2 = tright - tmid
		left = Get value at index... i-1
		mid = Get value at index... i
		right = Get value at index... i+1
		diff1 = mid - left
		diff2 = mid - right
		if diff1 > maxbump and diff2 > maxedge and gap1 < maxgap and gap2 < maxgap
		... or diff2 > maxbump and diff1 > maxedge and gap1 < maxgap and gap2 < maxgap
			Remove point... i
			Add point... tmid left+(tmid-tleft)/(tright-tleft)*(right-left)
		endif
		if diff1 > maxbump and gap2 >= maxgap
			Remove point... i
			Add point... tmid left + maxbump
		endif
		if diff2 > maxbump and gap1 >= maxgap
			Remove point... i
			Add point... tmid right + maxbump
		endif

		diff1 = left - mid
		diff2 = right - mid
		if diff1 > maxbump and diff2 > maxedge and gap1 < maxgap and gap2 < maxgap
		... or diff2 > maxbump and diff1 > maxedge and gap1 < maxgap and gap2 < maxgap
			Remove point... i
			Add point... tmid left+(tmid-tleft)/(tright-tleft)*(right-left)
		endif
		if diff1 > maxbump and gap2 >= maxgap
			Remove point... i
			Add point... tmid left - maxbump
		endif
		if diff2 > maxbump and gap1 >= maxgap
			Remove point... i
			Add point... tmid right - maxbump
		endif
	endfor
endproc

procedure Normalization
	select PitchTier 'name$'
	lasttime = Get finishing time
	Create PitchTier... normactutimef0 0 lasttime
	Create TableOfReal... normf0 1 2
	Set column label (index)... 1 NormalizedTime
	Set column label (index)... 2 F0
	Create TableOfReal... normactuf0 1 2
	Set column label (index)... 1 ActualTime
	Set column label (index)... 2 F0
	
	select TextGrid 'name$'
	nintervals = Get number of intervals... 1
	interval = 0
	found_interval = 0
	nrows = 0
	for m from 1 to nintervals
		select TextGrid 'name$'
		label$ = Get label of interval... 1 m
		if not label$ = ""
			start = Get starting point... 1 m
			end = Get end point... 1 m
			select PitchTier 'name$'
			index1 = Get high index from time... start
			index2 = Get low index from time... end
			if found_interval = 0
				found_interval = 1
				select PitchTier 'name$'
				firstime = start
			endif
			call Normalize
			interval = interval + 1
		endif
	endfor
	select TableOfReal normf0
	if nrows > 1
		Remove row (index)... nrows + 1
	endif
	select TableOfReal normactuf0
	if nrows > 1
		Remove row (index)... nrows + 1
	endif
	select PitchTier normactutimef0
	Remove
endproc

procedure Normalize
	duration = end - start

	for i from index1 to index2
		select PitchTier 'name$'
		time = Get time from index... i
		f0 = Get value at index... i
		select PitchTier normactutimef0
		Add point... (time-start)/duration+interval f0
	endfor
	
	for x from 1 to npoints
		normtime = x / npoints
		select PitchTier normactutimef0
		f0 = Get value at time... normtime+interval
		select TableOfReal normf0
		nrows = Get number of rows
		Set value... nrows 1 x+interval*npoints
		Set value... nrows 2 f0
		Set row label (index)... nrows 'label$'
		Insert row (index)... nrows + 1
		select TableOfReal normactuf0
		nrows = Get number of rows
		Set value... nrows 1 normtime*duration+start
		if set_initial_time_for_normf0_to_0
			Set value... nrows 1 normtime*duration+start-firstime
		endif
		Set value... nrows 2 f0
		Set row label (index)... nrows 'label$'
		Insert row (index)... nrows + 1
	endfor
endproc

procedure Sampling
	select PitchTier 'name$'
	Create TableOfReal... samplef0 1 2
	Set column label (index)... 1 SampleTime
	Set column label (index)... 2 F0

	select TextGrid 'name$'
	nintervals = Get number of intervals... 1
	nlabels = 0
	found_interval = 0
	nrows = 0
	sampleStart = Get starting point... 1 1
	sampleEnd = Get end point... 1 nintervals
	Create PitchTier... samplef0 sampleStart sampleEnd
	for m from 1 to nintervals
		select TextGrid 'name$'
		label$ = Get label of interval... 1 m
		if not label$ = ""
			nlabels += 1
			start = Get starting point... 1 m
			end = Get end point... 1 m
			duration = end - start
			if found_interval = 0
				found_interval = 1
			endif

			select PitchTier 'name$'
			nsamples = duration * f0_sample_rate + 1
			for x from 0 to nsamples - 1
				select PitchTier 'name$'
				sample_time = start + x/f0_sample_rate
				f0 = Get value at time... sample_time
				select PitchTier samplef0
				Add point... sample_time f0
				select TableOfReal samplef0
				nrows = Get number of rows
				Set value... nrows 1 sample_time
				Set value... nrows 2 f0
				Set row label (index)... nrows 'label$'
				Insert row (index)... nrows + 1
			endfor
		endif
	endfor
	select TableOfReal samplef0
	if nrows > 1
		Remove row (index)... nrows + 1
	endif
endproc

procedure Differentiation
	select PitchTier samplef0
	Rename... semitonef0
	Formula... 12 * ln (self) / ln(2); semitone
	Down to TableOfReal... Hertz
	Set column label (index)... 1 time
	Set column label (index)... 2 f0 (st)

	Write to headerless spreadsheet file... 'directory$''name$'.semitonef0
	Remove
	call Smooth "semitonef0" "smoothf0" 0.05 * f0_sample_rate
	Create PitchTier... velocity sampleStart sampleEnd
	Create TableOfReal... velocity 1 2
	Set column label (index)... 1 SampleTime
	Set column label (index)... 2 Velocity(semitone/s)
	
	select TextGrid 'name$'
	nintervals = Get number of intervals... 1
	nrows = 0
	for m from 1 to nintervals
		select TextGrid 'name$'
		label$ = Get label of interval... 1 m
		if not label$ = ""
			start = Get starting point... 1 m
			end = Get end point... 1 m
			select PitchTier smoothf0
			index_first = Get high index from time... start
			index_last = Get low index from time... end
			for x from index_first to index_last - 1
				if x = index_first or x = index_last - 1
					x2 = x + 1
				else
					x2 = x + 2
				endif
				select PitchTier smoothf0
				f01 = Get value at index... x
				f02 = Get value at index... x2
				sampletime1 = Get time from index... x
				sampletime2 = Get time from index... x2
				velocity = (f02 - f01) / (sampletime2 - sampletime1)
				velocity_time = 0.5 * (sampletime1 + sampletime2)
				select PitchTier velocity
				Add point... velocity_time velocity
				select TableOfReal velocity
				nrows = Get number of rows
				Set value... nrows 1 velocity_time
				Set value... nrows 2 velocity
				Set row label (index)... nrows 'label$'
				Insert row (index)... nrows + 1
			endfor
		endif
	endfor
	select TableOfReal velocity
	if nrows > 1
		Remove row (index)... nrows + 1
	endif
endproc

procedure Means
	select Sound 'name$'
	To Intensity... 100 0 yes

	select TextGrid 'name$'
	nintervals = Get number of intervals... 1
	Create TableOfReal... means 1 16
	Set column label (index)... 1 maxf0
	Set column label (index)... 2 minf0
	Set column label (index)... 3 excursion_size
	Set column label (index)... 4 meanf0
	Set column label (index)... 5 finalf0
	Set column label (index)... 6 mean_intensity
	Set column label (index)... 7 duration
	Set column label (index)... 8 max_velocity
	Set column label (index)... 9 final_velocity
	Set column label (index)... 10 initialf0
	Set column label (index)... 11 target_slope
	Set column label (index)... 12 target_height
	Set column label (index)... 13 strength
	Set column label (index)... 14 duration
	Set column label (index)... 15 rmse
	Set column label (index)... 16 correlation

	interval = 0
	for mm from 1 to nintervals
		select TextGrid 'name$'
		label$ = Get label of interval... 1 mm
		if not label$ = ""
			interval = interval + 1
			start = Get starting point... 1 mm
			end = Get end point... 1 mm
			duration = 1000 * (end - start)
			start1 = start + perturbation_length/1000
			select TableOfReal means
			Set row label (index)... interval 'label$'
			select PitchTier 'name$'
			meanf0 = Get mean (points)... start1 end
			early_end = end + final_offset
			finalf0 = Get value at time... early_end
			To Pitch... 0.02 30 600
			max_f0 = Get maximum... start1 end Hertz Parabolic
			min_f0 = Get minimum... start1 end Hertz Parabolic
			excursionsize = hertzToSemitones(max_f0) - hertzToSemitones(min_f0)
			Remove
			select Intensity 'name$'
			intensity = Get mean... start end energy
			select PitchTier smooth_velocity
			final_velocity'interval' = Get value at time... early_end
			
			mid = 0.5 * (start + end)
			select PitchTier smooth_velocity
			index_first = Get high index from time... mid
			index_last = Get low index from time... end
			maxvelocity = 0
			for x from index_first to index_last
				v = Get value at index... x
				if abs(v) > abs(maxvelocity)
					maxvelocity = v
				endif
			endfor

			select TableOfReal means
			Set value... interval 1 max_f0
			Set value... interval 2 min_f0
			Set value... interval 3 excursionsize
			Set value... interval 4 meanf0
			Set value... interval 5 finalf0
			Set value... interval 6 intensity
			Set value... interval 7 duration
			Set value... interval 8 maxvelocity
			Set value... interval 9 final_velocity'interval'
			Insert row (index)... interval + 1
		endif
	endfor

	if found_interval
		#pause
		call Target
		select Sound 'name$'
		To Manipulation... 0.01 75 600
		select PitchTier fittedf0
		Formula... exp(self*ln(2)/12)
		plus Manipulation 'name$'
		Replace pitch tier
		select TableOfReal fittedf0
		Write to headerless spreadsheet file... 'directory$''name$'.qTAf0
#		plus PitchTier fittedf0
		Remove
		select TableOfReal fittedvelocity
		Write to headerless spreadsheet file... 'directory$''name$'.qTAvelocity
		plus PitchTier fittedvelocity
		plus TableOfReal trainingf0
;		plus TableOfReal semitonef0
		Remove

		interval = 0
		for mm from 1 to nintervals
			select TextGrid 'name$'
			label$ = Get label of interval... 1 mm
			if not label$ = ""
				interval = interval + 1
				select TableOfReal means
				Set value... interval 10 xInitial
				Set value... interval 11 mBest'interval'
				Set value... interval 12 bBest'interval'
				Set value... interval 13 lambdaBest'interval'
				Set value... interval 14 duration'interval'
				Set value... interval 15 rmse'interval'
				Set value... interval 16 corr'interval'
			endif
		endfor
	endif
	select TableOfReal means
	nrows = Get number of rows
	if nrows > 1
		Remove row (index)... nrows
	endif
endproc

procedure All_means file_name$
	Read TableOfReal from headerless spreadsheet file... 'directory$''name$'.means
	nrows = Get number of rows
	titleline$ = "Filename"
	target_titleline$ = "Filename	initialf0"
	maxf0line$ = name$
	minf0line$ = name$
	excursionsizeline$ = name$
	meanf0line$ = name$
	finalf0line$ = name$
	intensityline$ = name$
	durationline$ = name$
	maxvelocityline$ = name$
	finalvelocityline$ = name$
	targetline$ = name$
	for n from 1 to nrows
		if !hasmeanstitle
			rowname$ = Get row label... n
			titleline$ = "'titleline$'	'rowname$'"
			target_titleline$ = "'target_titleline$'	'rowname$'__slope	height	strength	duration	rmse	correlation"
		endif
		maxf0 = Get value... n 1
		maxf0line$ = "'maxf0line$'	'maxf0'"
		minf0 = Get value... n 2
		minf0line$ = "'minf0line$'	'minf0'"
		excursionsize = Get value... n 3
		excursionsizeline$ = "'excursionsizeline$'	'excursionsize'"
		meanf0 = Get value... n 4
		meanf0line$ = "'meanf0line$'	'meanf0'"
		finalf0 = Get value... n 5
		finalf0line$ = "'finalf0line$'	'finalf0'"
		intensity = Get value... n 6
		intensityline$ = "'intensityline$'	'intensity'"
		duration = Get value... n 7
		durationline$ = "'durationline$'	'duration'"
		maxvelocity = Get value... n 8
		maxvelocityline$ = "'maxvelocityline$'	'maxvelocity'"
		final_velocity = Get value... n 9
		finalvelocityline$ = "'finalvelocityline$'	'final_velocity'"
		xInitial = Get value... n 10
		target_slope = Get value... n 11
		target_height = Get value... n 12
		strength = Get value... n 13
		target_duration = Get value... n 14
		rmse = Get value... n 15
		corr = Get value... n 16
		if n = 1
			targetline$ = "'targetline$'	'xInitial'	'target_slope'	'target_height'	'strength'	'target_duration'	'rmse'	'corr'"
		else
			targetline$ = "'targetline$'	'target_slope'	'target_height'	'strength'	'target_duration'	'rmse'	'corr'"
		endif
	endfor
	if !hasmeanstitle
		filedelete maxf0.txt
		filedelete minf0.txt
		filedelete excursionsize.txt
		filedelete meanf0.txt
		filedelete finalf0.txt
		filedelete meanintensity.txt
		filedelete duration.txt
		filedelete maxvelocity.txt
		filedelete finalvelocity.txt
		filedelete targets.txt
		titleline$ = "'titleline$''newline$'"
		target_titleline$ = "'target_titleline$''newline$'"
		fileappend maxf0.txt 'titleline$'
		fileappend minf0.txt 'titleline$'
		fileappend excursionsize.txt 'titleline$'
		fileappend meanf0.txt 'titleline$'
		fileappend finalf0.txt 'titleline$'
		fileappend meanintensity.txt 'titleline$'
		fileappend duration.txt 'titleline$'
		fileappend maxvelocity.txt 'titleline$'
		fileappend finalvelocity.txt 'titleline$'
		fileappend targets.txt 'target_titleline$'
		hasmeanstitle = 1
	endif
	maxf0line$ = "'maxf0line$''newline$'"
	fileappend "maxf0.txt" 'maxf0line$'
	minf0line$ = "'minf0line$''newline$'"
	fileappend "minf0.txt" 'minf0line$'
	excursionsizeline$ = "'excursionsizeline$''newline$'"
	fileappend "excursionsize.txt" 'excursionsizeline$'
	meanf0line$ = "'meanf0line$''newline$'"
	fileappend "meanf0.txt" 'meanf0line$'
	finalf0line$ = "'finalf0line$''newline$'"
	fileappend "finalf0.txt" 'finalf0line$'
	intensityline$ = "'intensityline$''newline$'"
	fileappend "meanintensity.txt" 'intensityline$'
	durationline$ = "'durationline$''newline$'"
	fileappend "duration.txt" 'durationline$'
	maxvelocityline$ = "'maxvelocityline$''newline$'"
	fileappend "maxvelocity.txt" 'maxvelocityline$'
	finalvelocityline$ = "'finalvelocityline$''newline$'"
	fileappend "finalvelocity.txt" 'finalvelocityline$'
	targetline$ = "'targetline$''newline$'"
	fileappend "targets.txt" 'targetline$'
	Remove
endproc

procedure All_normf0 file_name$
	Read TableOfReal from headerless spreadsheet file... 'directory$''name$'.timenormf0
	nrows = Get number of rows
	titleline$ = "Normtime"
	resultline$ = "_"+name$
	for n from 1 to nrows
		if !hasnormf0
			normtime$ = Get value... n 1
			titleline$ = "'titleline$'	'normtime$'"
		endif
		value = Get value... n 2
		resultline$ = "'resultline$'	'value'"
	endfor
	if !hasnormf0
		filedelete normf0.txt
		titleline$ = "'titleline$''newline$'"
		fileappend normf0.txt 'titleline$'
		hasnormf0 = 1
	endif
	resultline$ = "'resultline$''newline$'"
	fileappend "normf0.txt" 'resultline$'
	Remove
	Read TableOfReal from headerless spreadsheet file... 'directory$''name$'.actutimenormf0
	nrows = Get number of rows
	titleline$ = "Norm actual time"
	resultline$ = "_"+name$
	for n from 1 to nrows
		if !hasnormactutime
			titleline$ = "'titleline$'	'n'"
		endif
		value = Get value... n 1
		resultline$ = "'resultline$'	'value'"
	endfor
	if !hasnormactutime
		filedelete normactutime.txt
		titleline$ = "'titleline$''newline$'"
		fileappend normactutime.txt 'titleline$'
		hasnormactutime = 1
	endif
	resultline$ = "'resultline$''newline$'"
	fileappend "normactutime.txt" 'resultline$'
	Remove
endproc

procedure All_samplef0 file_name$
	Read TableOfReal from headerless spreadsheet file... 'directory$''name$'.samplef0
	nrows = Get number of rows
	titleline$ = "Sampletime"
	resultline$ = "_"+name$
	for n from 1 to nrows
		if !hassamplef0
			sampletime = Get value... n 1
			if n == 1
				onsettime = sampletime
			endif
			sampletime = sampletime - onsettime
			titleline$ = "'titleline$'	'sampletime'"
		endif
		value = Get value... n 2
		resultline$ = "'resultline$'	'value'"
	endfor
	if !hassamplef0
		filedelete samplef0.txt
		titleline$ = "'titleline$''newline$'"
		fileappend samplef0.txt 'titleline$'
		hassamplef0 = 1
	endif
	resultline$ = "'resultline$''newline$'"
	fileappend "samplef0.txt" 'resultline$'
	Remove
endproc

procedure All_f0velocity file_name$
	Read TableOfReal from headerless spreadsheet file... 'directory$''name$'.f0velocity
	nrows = Get number of rows
	titleline$ = "Sampletime"
	resultline$ = "_"+name$
	for n from 1 to nrows
		if !hasf0velocity
			sampletime = Get value... n 1
			if n == 1
				onsettime = sampletime
			endif
			sampletime = sampletime - onsettime
			titleline$ = "'titleline$'	'sampletime'"
		endif
		value = Get value... n 2
		resultline$ = "'resultline$'	'value'"
	endfor
	if !hasf0velocity
		filedelete f0velocity.txt
		titleline$ = "'titleline$''newline$'"
		fileappend f0velocity.txt 'titleline$'
		hasf0velocity = 1
	endif
	resultline$ = "'resultline$''newline$'"
	fileappend "f0velocity.txt" 'resultline$'
	Remove
endproc

procedure All_qTAf0 file_name$
	Read TableOfReal from headerless spreadsheet file... 'directory$''name$'.qTAf0
	nrows = Get number of rows
	titleline$ = "Sampletime"
	resultline$ = "_"+name$
	for n from 1 to nrows
		if !hasqTAf0
			sampletime = Get value... n 1
			if n == 1
				onsettime = sampletime
			endif
			sampletime = sampletime - onsettime
			titleline$ = "'titleline$'	'sampletime'"
		endif
		value = Get value... n 2
		resultline$ = "'resultline$'	'value'"
	endfor
	if !hasqTAf0
		filedelete f0velocity.txt
		titleline$ = "'titleline$''newline$'"
		fileappend qTAf0.txt 'titleline$'
		hasqTAf0 = 1
	endif
	resultline$ = "'resultline$''newline$'"
	fileappend "qTAf0.txt" 'resultline$'
	Remove
endproc

procedure Smooth curve_in$ curve_out$ width
	Create PitchTier... 'curve_out$' sampleStart sampleEnd
	
	for j from 1 to width							; make a triangular window of size = width 
		if j < width / 2 + 0.5
			weight'j' = j
		else 
			weight'j' = width - j + 1
		endif
	endfor

	select PitchTier 'curve_in$'
	smooth_end = Get number of points

	for i from 1 to width / 2						; smooth initial points: 0 to width/2 - 1 
	    n = 0.0
		smoothsample = 0.0
		select PitchTier 'curve_in$'
		sample_time = Get time from index... i
	    for j from 1 to width/2 + i					; window size = width/2 to width - 1
	    	j = 'j:0'
	    	rawsample = Get value at index... j
	    	index = width / 2 + j - i
	    	index = 'index:0'
			smoothsample += weight'index' * rawsample
			n += weight'index'
	    endfor
		smoothsample /= n
		if smoothsample != undefined
			select PitchTier 'curve_out$'
			Add point... sample_time smoothsample
		endif
	endfor
	
	for i from width/2 to smooth_end - width/2				; smooth from width/2 to end-width/2
		n = 0
		smoothsample = 0.0
		select PitchTier 'curve_in$'
		sample_time = Get time from index... i
		for j from 1 to width
	    	rawsample = Get value at index... i-width/2+j
			smoothsample += weight'j' * rawsample
			n += weight'j'
		endfor
		smoothsample /= n
		if smoothsample != undefined
			select PitchTier 'curve_out$'
			Add point... sample_time smoothsample
		endif
	endfor
	
	i = width/2
	while i > 0										; smooth final points: end - width/2 to end
		n = 0.0
		smoothsample = 0.0
		select PitchTier 'curve_in$'
		sample_time = Get time from index... smooth_end-i
		j = width/2 + i
		j = 'j:0'
		while j > 1									; window size = width - 1 to width/2 
	    	rawsample = Get value at index... smooth_end-j
	    	index = width/2+i-j + 1
	    	index = 'index:0'
			smoothsample += weight'index' * rawsample
			n += weight'index'
			j -= 1
		endwhile
		smoothsample /= n
		if smoothsample != undefined
			select PitchTier 'curve_out$'
			Add point... sample_time smoothsample
		endif
		i -= 1
	endwhile
endproc


procedure Target
	Create PitchTier... fittedf0 sampleStart sampleEnd
	Create PitchTier... fittedvelocity sampleStart sampleEnd
	Create TableOfReal... fittedf0 1 2
	Set column label (index)... 1 SampleTime
	Set column label (index)... 2 fittedf0 (st)
	Create TableOfReal... fittedvelocity 1 2
	Set column label (index)... 1 SampleTime
	Set column label (index)... 2 velocity (st/s)

	filedelete 'directory$''name$'.primitive_code
	filedelete 'directory$''name$'.qTAfest
	
	select TextGrid 'name$'
	nintervals = Get number of intervals... 1
	nTiers = Get number of tiers
	if nTiers > 1
		tier2$ = Get tier name... 2
		nintervals2 = Get number of intervals... 2
	else
		tier2$ = "null"
	endif
	if nTiers < 2 or tier2$ != "target" or tier2$ == "target" and nintervals2 != nintervals
		Duplicate tier... 1 2 target
		Replace interval text... 2 0 nintervals . "" Regular Expressions
		if tier2$ == "target" and nintervals2 != nintervals
			Remove tier... 3
		endif
		Write to short text file... 'directory$''name$'.target
	endif
	nrows = 0
	interval_t = 0

	select PitchTier semitonef0
	Down to TableOfReal... Hertz
	Rename... trainingf0

	for n from 1 to nintervals
		select TextGrid 'name$'
		label$ = Get label of interval... 1 n
		target$ = Get label of interval... 2 n
		if not label$ = ""
			interval_t = interval_t + 1
			start = Get starting point... 1 n
			end = Get end point... 1 n
			select PitchTier semitonef0
			index_first = Get low index from time... start
			index_last = Get low index from time... end
			tFinal = Get time from index... index_last
			if interval_t == 1
				tInitial = Get time from index... index_first
				xInitial = Get value at index... index_first
				x0 = xInitial
				v0 = 0
				a0 = 0
				fileappend 'directory$''name$'.primitive_code 'xInitial''newline$'
				fileappend 'directory$''name$'.qTAfest #'newline$'
			else
				x0 = xFinal
				v0 = vFinal
				a0 = aFinal
			endif
			
			mMin = min_target_slope
			mMax = max_target_slope
			if index_regex(target$,"\d")
				slope = 'target$'
				if slope < 0
					mMin = slope
				elsif slope > 0
					mMax = slope
				else
					mMin = 0
					mMax = 0.01
				endif
			elsif left$(target$,1) == "h" or left$(target$,1) == "H" or left$(target$,1) == "l" or left$(target$,1) == "L" or left$(target$,1) == "m" or left$(target$,1) == "M"
				mMin = 0
				mMax = 0.01
			elsif left$(target$,1) == "f" or left$(target$,1) == "F" or final_velocity'interval_t' < 0 and use_final_velocity_to_constrain_slope
				mMax = 0
			elsif left$(target$,1) == "r" or left$(target$,1) == "R" or final_velocity'interval_t' > 0 and use_final_velocity_to_constrain_slope
				mMin = 0
			endif
			bMin = min_target_height
			bMax = max_target_height
			lambdaMin = min_strength
			lambdaMax = max_strength

			filedelete 'directory$'config
			fileappend 'directory$'config 'mMin' 'mMax''newline$'
			fileappend 'directory$'config 'bMin' 'bMax''newline$'
			fileappend 'directory$'config 'lambdaMin' 'lambdaMax' 'fixed_strength''newline$'
			fileappend 'directory$'config 'x0' 'v0' 'a0'

			select TableOfReal trainingf0
			index_last1 = index_last-1
			Extract row ranges... 'index_first':'index_last1'
			Write to short text file... 'directory$'data
			Remove

			if b_Location = 1
				if fileReadable("./learnqta")
					system ./learnqta_onset 'directory$'
				elsif fileReadable(".\learnqta")
					system .\learnqta_onset 'directory$'
				else
					printline Cannot find learnqta!
					exit
				endif	
			else
				if fileReadable("./learnqta")
					system ./learnqta ./
				elsif fileReadable(".\learnqta.exe")
					system .\learnqta .\
				else
					printline Cannot find learnqta!
					exit
				endif	
			endif
			#printline interval: 'label$' 'n' 'name$'
			#system Rscript commands.R
			#pause
			buff$ < output
			
	
	
			#First line: qTA parameters
			len_buff = length(buff$)
			line_index = index(buff$,newline$)
			sbuff$ = left$(buff$,line_index-1)
			buff$ = mid$(buff$,line_index+1,len_buff)
			len_sbuff = length(sbuff$)
	
			#First line: m
			sep_index = index(sbuff$," ")
			pbuff$ = left$(sbuff$,sep_index-1)
			sbuff$ = mid$(sbuff$,sep_index+1,len_sbuff)
			mBest'interval_t' = 'pbuff$'
			m = mBest'interval_t'
	
			#First line: b
			sep_index = index(sbuff$," ")
			pbuff$ = left$(sbuff$,sep_index-1)
			sbuff$ = mid$(sbuff$,sep_index+1,len_sbuff)
			if b_Location = 1
				bBest'interval_t' = 'pbuff$' - xInitial
			else
				bBest'interval_t' = 'pbuff$' + m * (end-start) - xInitial
			endif
			b = bBest'interval_t' + xInitial
	
			#First line: lambda
			lambdaBest'interval_t' = 'sbuff$'
			lambda = lambdaBest'interval_t'
	
			duration'interval_t' = end - start
			d = duration'interval_t'
	
			fileappend 'directory$''name$'.primitive_code 'm', 'b', 'lambda', 'd'
			if interval_t < nlabels
				fileappend 'directory$''name$'.primitive_code :
			endif
	
			fileappend 'directory$''name$'.qTAfest 'tab$'0.00 26 syl ; slope 'm' ; height 'b' ; strength 'lambda' ;
			if interval_t < nlabels
				fileappend 'directory$''name$'.qTAfest 'newline$'
			endif
			
			#Second line: final F0 articulatory state
			len_buff = length(buff$)
			line_index = index(buff$,newline$)
			sbuff$ = left$(buff$,line_index-1)
			buff$ = mid$(buff$,line_index+1,len_buff)
			len_sbuff = length(sbuff$)
	
			#Second line: xFinal
			sep_index = index(sbuff$," ")
			pbuff$ = left$(sbuff$,sep_index-1)
			sbuff$ = mid$(sbuff$,sep_index+1,len_sbuff)
			xFinal = 'pbuff$'
	
			#Second line: vFinal
			sep_index = index(sbuff$," ")
			pbuff$ = left$(sbuff$,sep_index-1)
			sbuff$ = mid$(sbuff$,sep_index+1,len_sbuff)
			if sbuff$ == "inf" || sbuff$ == "-inf"
				vFinal = 0
			else
				vFinal = 'pbuff$'
			endif
	
			#Second line: aFinal
			if sbuff$ == "inf" || sbuff$ == "-inf"
				aFinal = 0
			else
				aFinal = 'sbuff$'
			endif		
	
			#Third line: rmse and correlation results
			len_buff = length(buff$)
			line_index = index(buff$,newline$)
			sbuff$ = left$(buff$,line_index-1)
			buff$ = mid$(buff$,line_index+1,len_buff)
			len_sbuff = length(sbuff$)
	
			#Third line: rmse
			sep_index = index(sbuff$," ")
			pbuff$ = left$(sbuff$,sep_index-1)
			sbuff$ = mid$(sbuff$,sep_index+1,len_sbuff)
			rmse'interval_t' = 'pbuff$'
	
			#Third line: correlation
			corr'interval_t' = 'sbuff$'
	
			#Forth line: number of sample
			len_buff = length(buff$)
			line_index = index(buff$,newline$)
			sbuff$ = left$(buff$,line_index-1)
			buff$ = mid$(buff$,line_index+1,len_buff)
			len_sbuff = length(sbuff$)
			number_of_row = 'sbuff$'
	
			#Remaining: time and synthesized f
			select PitchTier fittedf0
			for i from 1 to number_of_row
				select TableOfReal fittedf0
				len_buff = length(buff$)
				line_index = index(buff$,newline$)
				sbuff$ = left$(buff$,line_index-1)
				buff$ = mid$(buff$,line_index+1,len_buff)
				len_sbuff = length(sbuff$)
				#printline 'sbuff$'
	
				sep_index = index(sbuff$," ")
				pbuff$ = left$(sbuff$,sep_index-1)
				sbuff$ = mid$(sbuff$,sep_index+1,len_sbuff)
				sampletime = 'pbuff$'
	#			qTAf0 = 'sbuff$' + xInitial
				if i > 1
					qTAf0_previous = qTAf0
				endif
				qTAf0 = 'sbuff$'
	
				nrows = Get number of rows
				Set value... nrows 1 sampletime
				Set value... nrows 2 qTAf0
				Set row label (index)... nrows 'label$'
				Insert row (index)... nrows + 1
				select PitchTier fittedf0
				Add point... sampletime qTAf0
				if i > 1
					select TableOfReal fittedvelocity
					nrows = Get number of rows
					Set value... nrows 1 sampletime
					Set value... nrows 2  (qTAf0 - qTAf0_previous) * f0_sample_rate
					Set row label (index)... nrows 'label$'
					Insert row (index)... nrows + 1
				endif
			endfor

			for x from index_first to index_last - 1
				select PitchTier semitonef0
				sampletime = Get time from index... x
				rawf0 = Get value at time... sampletime
			endfor
		endif
	endfor
	filedelete 'directory$'config
	filedelete 'directory$'data
	filedelete 'directory$'output
	select TableOfReal fittedf0
	if nrows > 1
		Remove row (index)... nrows + 1
	endif
	select TableOfReal fittedvelocity
	nrows = Get number of rows
	if nrows > 1
		Remove row (index)... nrows
	endif
endproc

procedure plot_target t1 t2
	demoWindowTitle ("PENTAtrainer 'version$'")
	demo Erase all
	demo Blue
	demo Times
	demo Line width... 1
	demo 12
	demo Select outer viewport... 0 100 50 100
	if found_interval
		select PitchTier semitonef0
		To Pitch... 0.02 60 600
	else
		select Sound 'name$'
		To Pitch (ac)... 0 75 15 no 0.03 0.45 0.01 0.35 0.14 600
		Formula... 12 * ln (self) / ln(2); semitone
	endif
	f0_floor = Get minimum... 0 0 Hertz Parabolic
	f0_ceiling = Get maximum... 0 0 Hertz Parabolic
	f0_floor -= 10
	f0_ceiling += 10
	demo Draw... t1 t2 f0_floor f0_ceiling no
	Remove
	demo Line width... 0.5
	demo Draw inner box
	if found_interval
		select PitchTier fittedf0
		Copy... fittedf0_st
		Formula... 12 * ln (self) / ln(2); semitone
		demo Black
		demo Text special... t1-0.04*(t2-t1) Centre 0.5*(f0_floor+f0_ceiling) Bottom Times 12 90 Pitch (st)
		demo Text special... 0.5*(t1+t2) Centre f0_floor-0.125*(f0_ceiling-f0_floor) Top Times 12 0 Time (s)
		demo Red
		demo Draw... t1 t2 f0_floor f0_ceiling no
		Remove
	endif
	demo Marks bottom every... 1 0.1 no yes no
	demo Marks bottom every... 1 0.5 yes yes no
	demo Marks left every... 1 5 no yes no
	demo Marks left every... 1 10 yes yes no

	interval_plot = 0
	last_end = 32767
	demo Dashed line
	for nn from 1 to nintervals
		select TextGrid 'name$'
		label$ = Get label of interval... 1 nn
		if not label$ = ""
			interval_plot += 1
			start = Get starting point... 1 nn
			end = Get end point... 1 nn
			duration = end - start
			m = mBest'interval_plot'
			b = bBest'interval_plot'
			y1 = xInitial + b - m*duration
			b -= m*duration
			y2 = xInitial + b + m*duration
			demo Black
			demo Text special... start Left f0_ceiling Bottom Times 12 0 'label$'
			demo Grey
			demo Line width... 0.5
			demo Draw line... start y1 end y2
			demo Lime
			demo Line width... 0.25
			demo Draw line... start f0_floor start f0_ceiling
			if (start - last_end) > 0.001
				demo Paint rectangle... white last_end start f0_floor+1 f0_ceiling-1
				demo Draw line... last_end f0_floor last_end f0_ceiling
				demo Silver
			endif
			last_end = end
		endif
	endfor
	
	demo Select inner viewport... 7 95 42 45
	demo Axes... 7 95 42 45
	demo Paint rounded rectangle... {0.98,0.98,0.8} 5 10 42 45 2	; plot
	demo Paint rounded rectangle... {0.98,0.98,0.8} 12 18 42 45 2	; zoom in
	demo Paint rounded rectangle... {0.98,0.98,0.8} 19 25 42 45 2	; zoom out
	demo Paint rounded rectangle... {0.98,0.98,0.8} 26 32 42 45 2	; zoom all
	demo Paint rounded rectangle... {0.98,0.98,0.8} 34 38 42 45 2	; shift to start
	demo Paint rounded rectangle... {0.98,0.98,0.8} 39 43 42 45 2	; shift left
	demo Paint rounded rectangle... {0.98,0.98,0.8} 44 48 42 45 2	; shif right
	demo Paint rounded rectangle... {0.98,0.98,0.8} 49 53 42 45 2	; shift to end
	demo Paint rounded rectangle... {0.98,0.98,0.8} 55 63 42 45 2	; play original
	demo Paint rounded rectangle... {0.98,0.98,0.8} 64 74 42 45 2	; play resynthesis
	demo Paint rounded rectangle... {0.98,0.98,0.8} 76 82 42 45 2	; Previous
	demo Paint rounded rectangle... {0.98,0.98,0.8} 83 87 42 45 2	; Next
	demo Paint rounded rectangle... {0.98,0.98,0.8} 89 93 42 45 2	; Exit
	demo Solid line
	demo Line width... 0.5
	demo Black
	demo Draw rounded rectangle... 5 10 42 45 2
	demo Draw rounded rectangle... 12 18 42 45 2
	demo Draw rounded rectangle... 19 25 42 45 2
	demo Draw rounded rectangle... 26 32 42 45 2
	demo Draw rounded rectangle... 34 38 42 45 2
	demo Draw rounded rectangle... 39 43 42 45 2
	demo Draw rounded rectangle... 44 48 42 45 2
	demo Draw rounded rectangle... 49 53 42 45 2
	demo Draw rounded rectangle... 55 63 42 45 2
	demo Draw rounded rectangle... 64 74 42 45 2
	demo Draw rounded rectangle... 76 82 42 45 2
	demo Draw rounded rectangle... 83 87 42 45 2
	demo Draw rounded rectangle... 89 93 42 45 2
	demo Text special... 7.5 centre 43.5 half Times 10 0 Replot
	demo Text special... 15 centre 43.5 half Times 10 0 Zoom in
	demo Text special... 22 centre 43.5 half Times 10 0 Zoom out
	demo Text special... 29 centre 43.5 half Times 10 0 Zoom all
	demo Text special... 36 centre 43.5 half Helvetica 10 0 |<<
	demo Text special... 41 centre 43.5 half Helvetica 10 0 <<
	demo Text special... 46 centre 43.5 half Helvetica 10 0 >>
	demo Text special... 51 centre 43.5 half Helvetica 10 0 >>|
	demo Text special... 59 centre 43.5 half Times 10 0 Play original
	demo Text special... 69 centre 43.5 half Times 10 0 Play resynthesis
	demo Text special... 79 centre 43.5 half Times 10 0 Previous
	demo Text special... 85 centre 43.5 half Times 10 0 Next
	demo Text special... 91 centre 43.5 half Times 10 0 Exit
	demo Text special... 2 left 32 bottom Courier 12 0 Current sound: 'name$' (No.'current_file')
	if more_file = 0
		demo Paint rectangle... White 0 100 25 30
		demo Red
		demo Text special... 2 left 27 bottom Courier 14 0 Last sound file...
	endif

	Erase all
	Blue
	Times
	Line width... 1
	12
	Select outer viewport... 0 10.5 0 4
	Axes... 0 1 0 1
	Text special... 0.02 left 0 bottom Courier 12 0 Current sound: 'name$' (No.'current_file')
	if found_interval
		select PitchTier semitonef0
		To Pitch... 0.02 60 600
	else
		select Sound 'name$'
		To Pitch (ac)... 0 75 15 no 0.03 0.45 0.01 0.35 0.14 600
		Formula... 12 * ln (self) / ln(2); semitone
	endif
	f0_floor = Get minimum... 0 0 Hertz Parabolic
	f0_ceiling = Get maximum... 0 0 Hertz Parabolic
	f0_floor -= 10
	f0_ceiling += 10
	Draw... t1 t2 f0_floor f0_ceiling no
	Remove
	Line width... 0.5
	Draw inner box
	if found_interval
		select PitchTier fittedf0
		Copy... fittedf0_st
		Formula... 12 * ln (self) / ln(2); semitone
		Black
		Text special... t1-0.04*(t2-t1) Centre 0.5*(f0_floor+f0_ceiling) Bottom Times 12 90 Pitch (st)
		Text special... 0.5*(t1+t2) Centre f0_floor-0.125*(f0_ceiling-f0_floor) Top Times 12 0 Time (s)
		Red
		Draw... t1 t2 f0_floor f0_ceiling no
		Remove
	endif
	Marks bottom every... 1 0.1 no yes no
	Marks bottom every... 1 0.5 yes yes no
	Marks left every... 1 5 no yes no
	Marks left every... 1 10 yes yes no

	interval_plot = 0
	last_end = 32767
	Dashed line
	for nn from 1 to nintervals
		select TextGrid 'name$'
		label$ = Get label of interval... 1 nn
		if not label$ = ""
			interval_plot += 1
			start = Get starting point... 1 nn
			end = Get end point... 1 nn
			duration = end - start
			m = mBest'interval_plot'
			b = bBest'interval_plot'
			y1 = xInitial + b - m*duration
			b -= m*duration
			y2 = xInitial + b + m*duration
			Black
			Text special... start Left f0_ceiling Bottom Times 12 0 'label$'
			Grey
			Line width... 0.5
			Draw line... start y1 end y2
			Lime
			Line width... 0.25
			Draw line... start f0_floor start f0_ceiling
			if (start - last_end) > 0.001
				Paint rectangle... white last_end start f0_floor+1 f0_ceiling-1
				Draw line... last_end f0_floor last_end f0_ceiling
				Silver
			endif
			last_end = end
		endif
	endfor
	Select outer viewport... 0 10.5 0 4.2
	Write to EPS file... 'name$'.eps
	system gs -sDEVICE=png16m -dTextAlphaBits=4 -dEPSCrop -r120 -dSAFER -dBATCH -dNOPAUSE -sOutputFile='name$'.png -q 'name$'.eps
	call on_input
endproc

procedure on_input
	demo Select inner viewport... 0 100 0 100
	demo Axes... 0 100 0 100
	loop = 1
	while (loop and demoWaitForInput ( ))
		if demoClicked ( )
			if demoClickedIn (12, 18, 42, 45)			; clicked Zoom in
;				call zoom t1 t2 0.5
				new_window_centre = t1 + (t2-t1)/2
				plot_width = 0.5 * (t2-t1)
				t1 = max (new_window_centre - plot_width/2, tInitial)
				t2 = min (new_window_centre + plot_width/2, tFinal)
				plot_width = t2-t1
				call plot_target t1 t2
			elsif demoClickedIn (19, 25, 42, 45)		; clicked Zoom out
;				call zoom t1 t2 2
				new_window_centre = t1 + (t2-t1)/2
				plot_width = 2 * (t2-t1)
				t1 = max (new_window_centre - plot_width/2, tInitial)
				t2 = min (new_window_centre + plot_width/2, tFinal)
				plot_width = t2-t1
				call plot_target t1 t2
			elsif demoClickedIn (26, 32, 42, 45)		; clicked Zoom all
;				call zoom tInitial tFinal 100
				new_window_centre = tInitial + (tFinal-tInitial)/2
				plot_width = 100 * (tFinal-tInitial)
				t1 = max (new_window_centre - plot_width/2, tInitial)
				t2 = min (new_window_centre + plot_width/2, tFinal)
				plot_width = t2-t1
				call plot_target t1 t2
			elsif demoClickedIn (34, 38, 42, 45)			; clicked Shift to start
;				call scroll tInitial -plot_width
				call plot_target tInitial t1+plot_width
			elsif demoClickedIn (39, 43, 42, 45)		; clicked Shift left
;				call scroll t1 -plot_width
					t1 = min (t1 - plot_width, tFinal + plot_width)
					t1 = max (t1, tInitial)
					t2 = t1 + plot_width
					call plot_target t1 t2
			elsif demoClickedIn (44, 48, 42, 45)		; clicked Shift right
;				call scroll t1 plot_width
					t1 = min (t1 + plot_width, tFinal - plot_width)
					t1 = max (t1, tInitial)
					t2 = t1 + plot_width
					call plot_target t1 t2
			elsif demoClickedIn (49, 53, 42, 45)		; clicked Shift to end
;				call scroll tFinal-plot_width plot_width
					call plot_target tFinal-plot_width tFinal
			elsif demoClickedIn (55, 63, 42, 45)		; clicked Play original
				demo Paint rounded rectangle... Yellow 55 63 42 45 2
				demo Black
				demo Draw rounded rectangle... 55 63 42 45 2
				demo Text special... 59 centre 43.5 half Times 10 0 Play original
				sound = Read from file... 'directory$''file_name$'
				Extract part... t1 t2 Rectangular 1.0 yes
				Play
				plus sound
				Remove
				demo Paint rounded rectangle... {0.98,0.98,0.8} 55 63 42 45 2
				demo Black
				demo Draw rounded rectangle... 55 63 42 45 2
				demo Text special... 59 centre 43.5 half Times 10 0 Play original
			elsif demoClickedIn (64, 74, 42, 45)		; clicked Play resynthesis
				if found_interval
					demo Paint rounded rectangle... Yellow 64 74 42 45 2
					demo Black
					demo Draw rounded rectangle... 64 74 42 45 2
					demo Text special... 69 centre 43.5 half Times 10 0 Play resynthesis
					sound = Read from file... 'directory$''file_name$'
					manipulation = To Manipulation... 0.01 75 600
					select PitchTier fittedf0
					plus manipulation
					Replace pitch tier
					select manipulation
					resyn = Get resynthesis (overlap-add)
					Extract part... t1 t2 Rectangular 1.0 yes
					Play
					plus resyn
					plus sound
					plus manipulation
					Remove
					demo Paint rounded rectangle... {0.98,0.98,0.8} 64 74 42 45 2
					demo Black
					demo Draw rounded rectangle... 64 74 42 45 2
					demo Text special... 69 centre 43.5 half Times 10 0 Play resynthesis
				else
					demo Paint rectangle... White 0 100 25 30
					demo Red
					demo Text special... 2 left 27 bottom Courier 14 0 No resynthesis...
				endif
			elsif demoClickedIn (76, 82, 42, 45)		; clicked Previous
				if current_file < 2
					more_file -= 2
					demo Paint rectangle... White 0 100 25 30
					demo Red
					demo Text special... 2 left 27 bottom Courier 14 0 First sound file...
					if found_interval and more_file >= -1
						select PitchTier semitonef0
						plus PitchTier fittedf0
						plus Manipulation 'name$'
					Remove
					endif
				else
					current_file -= 2
					demo Erase all
					loop = 0
					replot = 0
					call Save 'directory$' 'name$'
					if found_interval
						select TextGrid 'name$'
						plus PitchTier semitonef0
						plus PitchTier fittedf0
						plus Manipulation 'name$'
					else
						select PitchTier 'name$'
						plus PitchTier samplef0
						plus TableOfReal samplef0
					endif
					plus PointProcess 'name$'
					Remove
					more_file = 1
				endif
			elsif demoClickedIn (83, 87, 42, 45)		; clicked Next
				#printline Clicked Next
				#pause
				if current_file = numberOfFiles
					more_file = 0
					call Save 'directory$' 'name$'
				else
					demo Erase all
					loop = 0
					replot = 0
					call Save 'directory$' 'name$'
					select TextGrid 'name$'
					if found_interval and more_file >= 0
						plus PitchTier semitonef0
						plus PitchTier fittedf0
						plus Manipulation 'name$'
					elsif more_file < 0
						plus PointProcess 'name$'
					else
						plus PitchTier 'name$'
						plus PitchTier samplef0
						plus TableOfReal samplef0
					endif
					plus PointProcess 'name$'
					Remove
					more_file = 1
				endif
				#pause
			elsif demoClickedIn (89, 93, 42, 45)		; clicked Exit
				demo Paint rectangle... White 0 100 25 30
				demo Red
				demo Text special... 30 left 27 bottom Courier 14 0 Now close window manually...
				loop = 0
				select TextGrid 'name$'
				plus PointProcess 'name$'
				plus Strings list
				plus Sound 'name$'
				if found_interval and more_file >= 0
					plus Manipulation 'name$'
					plus PitchTier semitonef0
					plus PitchTier fittedf0
				elsif  more_file >= 0
					plus PitchTier 'name$'
					plus TextGrid 'name$'
					plus PitchTier samplef0
					plus TableOfReal samplef0
				endif
				Remove
				exit
			elsif demoClickedIn (5, 10, 42, 45)		; clicked Replot
				replot = 1
				call Save 'directory$' 'name$'
			endif
		endif
		demo Select inner viewport... 0 100 0 100
		demo Axes... 0 100 0 100
	endwhile
endproc

procedure zoom t1 t2 factor
	new_window_centre = t1 + (t2-t1)/2
	plot_width = factor * (t2-t1)
	t1 = max (new_window_centre - plot_width/2, tInitial)
	t2 = min (new_window_centre + plot_width/2, tFinal)
	plot_width = t2-t1
	call plot_target t1 t2
endproc

procedure scroll t1 chunk
	t1 = min (t1 + chunk, tFinal - chunk)
	t1 = max (t1, tInitial)
	t2 = t1 + abs (chunk)
	call plot_target t1 t2
endproc
